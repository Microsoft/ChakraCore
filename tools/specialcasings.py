#!/usr/bin/env python
#-------------------------------------------------------------------------------------------------------
# Copyright (C) Microsoft. All rights reserved.
# Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
#-------------------------------------------------------------------------------------------------------

from __future__ import print_function
import json
import os
import shutil
import urllib2
from argparse import ArgumentParser

def to_unicode_escape(codepoints):
    return "".join(map(lambda codepoint: "\\u" + codepoint, codepoints.split(" ")))

def parse(casings):
    casings_list = casings.split("\n")
    casings_list = filter(lambda line: len(line) > 0, casings_list)
    casings_list = filter(lambda line: line[0] != "#", casings_list)
    casings_list = map(lambda casing: map(lambda part: part.strip(), casing.split(";")), casings_list)

    # filter out casings with conditions
    casings_list = filter(lambda casing: len(casing) == 5, casings_list)

    casings_dict_list = map(lambda casing: { "code": casing[0], "lower": casing[1], "upper": casing[3], "name": casing[4] }, casings_list)
    for casing in casings_dict_list:
        casing["code"] = to_unicode_escape(casing["code"])
        casing["lower"] = to_unicode_escape(casing["lower"])
        casing["upper"] = to_unicode_escape(casing["upper"])
        casing["name"] = casing["name"][2:]
    return casings_dict_list

def main():
    argparser = ArgumentParser(description = "Downloads CLDR's SpecialCasings.txt and formats it for use in Chakra")
    argparser.add_argument(
        "-u", "--url",
        help = "Specify a URL to download SpecialCasings.txt from",
        default = "ftp://ftp.unicode.org/Public/10.0.0/ucd/SpecialCasing.txt"
    )
    argparser.add_argument(
        "--js",
        help = "Exports the SpecialCasings.txt file as a Javascript file with `var SpecialCasings = (json)`",
        nargs = "?",
    )
    argparser.add_argument(
        "--json",
        help = "Exports the SpecialCasings.txt file as a JSON file. The JSON contains an array of objects, where each object has keys for code, lower, upper, and comment",
        nargs = "?"
    )
    args = argparser.parse_args()

    specialcasings = urllib2.urlopen(args.url).read()
    casings_dict_list = parse(specialcasings)

    if args.js is not None:
        with open(args.js, "w") as output:
            output.write("""//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

// This file was generated by tools/{0} using
// SpecialCasing.txt from {1}

""".format(os.path.basename(__file__), args.url))
            output.write("")
            output.write("var SpecialCasings = " + json.dumps(casings_dict_list, indent = 4, sort_keys = True).replace("\\\\", "\\") + ";")
    elif args.json is not None:
        with open(args.json, "w") as output:
            output.write(json.dumps(casings_dict_list, indent = 4, sort_keys = True))
    else:
        print(casings_dict_list)


if __name__ == "__main__":
    main()
